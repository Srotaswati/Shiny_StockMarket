Developing Data Products Week 4
========================================================
author: Srotaswati Panda
date: 11/10/2019
autosize: true

London Stock Exchange Market Cap
========================================================

- Overview: The shiny app shows the market capitalization as of Sept 2019, of single stocks or the Industry, of companies on the London Stock Exchange, depending on the user's choice. 
- Structure: There are two tabs, one to display individual figures and the other to show simple bar charts for the market cap by the category selected by the user.
- Documentation: To make it easy for use, a simple description is provided in the sidebar panel

This app is hosted at <https://neyana31.shinyapps.io/C09W04/>

Data Source  <https://www.londonstockexchange.com/statistics/companies-and-issuers/companies-and-issuers.htm>.

Application Widgets and Operations
========================================================
Applications

- CheckboxInput: This was required to display Industry specific or individual data 
- SelectInput: This was a dropdown to select stock in the first tab or the x category in the second tab.

Operations inside the Shiny App
- Inputs: Stock/ Industry (tab1) and Category (tab2)
- Outputs: Text Output (tab1) and Barcharts (tab2)


ui.R
========================================================
<font size=3>
```{r, eval=FALSE}
source("helper.R")
library(shiny)

category<-c("ICB.Industry","ICB.Super-Sector","International.Issuer")
shinyUI(fluidPage(

    # Application title
    titlePanel("London Stock Exchange as of Sept 2019"),

    # Sidebar with a slider input for number of bins
        tabsetPanel(
            tabPanel(
                "Market Cap",fluid=TRUE,
                sidebarLayout(
                    sidebarPanel(
                        checkboxInput("type","Single stock",value = TRUE),
                        conditionalPanel(
                            condition = "input.type==true",
                            selectInput(inputId="stock",label="Select your stock",choices = stockdf())
                        ),
                        conditionalPanel(
                            condition = "input.type==false",
                            selectInput(inputId = "industry",label = "Select ICB Industry",choices = industry())
                        ),
                        tags$div(class="header", checked=NA,
                                 tags$p("Click the checkbox if you want to see the market value of a single stock, else uncheck the box and select a sector from the drop-down. You can also choose to see the market cap of the entire exchange."),
                                 tags$a(href="https://www.londonstockexchange.com/statistics/companies-and-issuers/companies-and-issuers.htm", "Data Source")
                        )
                        
                    ),
                    mainPanel(
                        textOutput("cap")
                    )
                )
            ),
            tabPanel(
                "Bar Graph",fluid=TRUE,
                sidebarLayout(
                    sidebarPanel(
                        selectInput(inputId="xvalue",label = "Select category for graph",choices=category),
                        tags$div(class="header", checked=NA,
                                 tags$p("Select a category from the drop down to see the break-up of the market capitalization."),
                                 tags$a(href="https://www.londonstockexchange.com/statistics/companies-and-issuers/companies-and-issuers.htm", "Data Source")
                                )
                    ),
                    mainPanel(
                        plotOutput("graph")
                    )
                )
            )
            
        )
))

```
</font>

server.R
========================================================
class: small-code
```{r, eval=FALSE}
library(shiny)
source("helper.R")

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
    output$cap <- reactive({
        if(input$type)
            mcap(input$stock,NULL)
        else
            mcap(NULL,input$industry)
               
    })
    output$graph<-renderPlot((
        plot_graph(input$xvalue)
    ))
})
        


```

helper.R
========================================================
<font size = 3>
```{r, eval=FALSE}
library(openxlsx)
library(dplyr)
library(scales)
library(ggplot2)

# Get the list of stocks for dropdown
if(!file.exists("./data/lse_sept19.xlsx")){
  fileurl<-"https://www.londonstockexchange.com/statistics/companies-and-issuers/companies-defined-by-mifir-identifiers-list-on-lse.xlsx"
  download.file(fileurl,destfile = "./data/lse_sept19.xlsx",method="curl")
}
data<-read.xlsx("./data/lse_sept19.xlsx",sheet = 1,startRow = 6,colNames = TRUE)
data<-na.omit(data)

# Returns list of stocks
stockdf<-function(){
  data[,2]
}

# Returns list of sectors
industry<-function(){
  c("London Stock Exchange",unique(data[,3]))
}

# Returns market cap of selected input
mcap<-function(stock,industry){
  gbp<-dollar_format(prefix = "\u00a3 ",suffix = " m" )
  if(!is.null(stock)&is.null(industry)){
   gbp(as.numeric(data[which(data[,2]==stock),9]))
  }
  else {
     names(data)[9]="cap"
     group<-data%>%mutate(cap=as.numeric(cap))%>%group_by(ICB.Industry)%>%summarise(sum=sum(cap,na.rm=TRUE))
     group<-as.data.frame(group)
     if(industry=="London Stock Exchange")
       gbp(round(sum(group[,2]),0))
     else{
       gbp(round(group[which(group[,1]==industry),2],0))
     }
  }
}

#Returns graph of market cap vs selected category
plot_graph<-function(xvalue){
  num<-which(names(data)==xvalue)
  names(data)[9]="cap"
  group<-data%>%mutate(cap=as.numeric(cap))%>%group_by(!!!syms(names(data)[num]))%>%summarise(sum=sum(cap,na.rm = TRUE))
  group<-as.data.frame(group)
  names(group)<-c("x","y")
  group%>%ggplot(aes(x=x,y=y))+geom_col(fill="lightblue",color="grey")+ggtitle(paste("Market Capitalization by",xvalue))+theme(axis.title.x=element_blank())+scale_y_continuous(labels = comma)+ylab(paste("\u00a3"," m"))+theme(axis.text.x = element_text(angle = 90, hjust = 1))
}

```
</font>

Thank you!
========================================================
